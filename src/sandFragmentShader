precision highp float;
varying vec2 v_texCoord;
uniform sampler2D u_texture;
uniform float u_width;
uniform float u_height;
uniform int u_step;
uniform vec2 u_spawn;
uniform int u_element;
uniform int u_crayonSize;

const vec4 SAND = vec4(1.0,0.8,0.1,1.0);
const vec4 AIR = vec4(0.0,0.0,0.0,1.0);
const vec4 WATER = vec4(0.0,0.0,1.0,1.0);
const vec4 WATERL = vec4(0.0,0.1,1.0,1.0);
const vec4 WATERR = vec4(0.0,0.1,0.8,1.0);
const vec4 WOOD = vec4(0.6,0.4,0.2,1.0);
const vec4 MIST = vec4(0.5,0.5,0.5,1.0);
const vec4 FIRE = vec4(1.0,0.1,0.0,1.0);

const int SOLID_STATIC = 0; //NOT MOVING
const int SOLID = 1;
const int LIQUID = 2;
const int SOLID_LIQUID = 3;
const int GAS = 4;
const int GAS_MOVING = 8;
const int LIQUID_GAS = 6;
const int LIQUID_RIGHT = 10;
const int LIQUID_LEFT = 11;

bvec4 equalEnough(vec4 a, vec4 b){
    return bvec4(
        abs(a.r-b.r) < 0.01,
        abs(a.g-b.g) < 0.01,
        abs(a.b-b.b) < 0.01,
        abs(a.a-b.a) < 0.01        
    );
}

int getStateOfMatter(vec4 color){
    if(all(equalEnough(color, WATER))){
        return LIQUID;
    }else if (all(equalEnough(color, WATERL))){
        return LIQUID_LEFT;
    }else if(all(equalEnough(color, WATERR))){
        return LIQUID_RIGHT;
    }else if (all(equalEnough(color, SAND))){
        return SOLID;
    }else if (all(equalEnough(color, AIR))){
        return GAS;
    }else if (all(equalEnough(color, MIST))){
        return GAS_MOVING;
    }else if (all(equalEnough(color, WOOD))){
        return SOLID_STATIC;
    }
    return SOLID_STATIC;
}


bool compareStateOfMatter(int a, int b){
    if(a == LIQUID || a == LIQUID_LEFT || a == LIQUID_RIGHT){
      if(b == LIQUID || b == LIQUID_GAS || b == SOLID_LIQUID){
          return true;
      }
    }
    if(a == LIQUID_RIGHT){
      if(b == LIQUID_RIGHT){
          return true;
      }
    }
    if(a == LIQUID_LEFT){
      if(b == LIQUID_LEFT){
          return true;
      }
    }
    if(a == SOLID){
      if(b == SOLID || b == SOLID_LIQUID){
          return true;
      }
    }
    if(a == GAS || a == GAS_MOVING){
      if(b == GAS || b == LIQUID_GAS){
          return true;
      }
    }
    if(a == GAS_MOVING){
      if(b == GAS_MOVING){
          return true;
      }
    }
    return false;
}

int stepx;
int stepy;
const float SCALE = 1.0; // sand grain size

float dx;
float dy;
float cellx;
float celly;

vec4 getCellColor(float offsetX, float offsetY) {
    return texture2D(u_texture, vec2(
        (cellx + offsetX - float(stepx)) * dx,
        (celly + offsetY - float(stepy)) * dy
    ));
}

struct State{
    int cell0State;
    int cell1State;
    int cell2State;
    int cell3State;
};

struct Permutation{
    int cell0;
    int cell1;
    int cell2;
    int cell3;
};

struct Rule{
    State state;
    Permutation p;
};

Rule sandRules[9];

void initSandRules(){
    sandRules[0] = Rule(State(LIQUID_GAS,LIQUID_GAS,SOLID,LIQUID_GAS),Permutation(2,1,0,3));
    sandRules[1] = Rule(State(LIQUID_GAS,LIQUID_GAS,LIQUID_GAS,SOLID),Permutation(0,3,2,1));
    sandRules[2] = Rule(State(LIQUID_GAS,LIQUID_GAS,SOLID,SOLID),Permutation(2,3,0,1));
    sandRules[3] = Rule(State(LIQUID_GAS,SOLID,SOLID,SOLID),Permutation(2,1,0,3));
    sandRules[4] = Rule(State(SOLID,LIQUID_GAS,SOLID,SOLID),Permutation(0,3,2,1));
    sandRules[5] = Rule(State(SOLID,LIQUID_GAS,LIQUID_GAS,SOLID),Permutation(0,3,2,1));
    sandRules[6] = Rule(State(LIQUID_GAS,SOLID,SOLID,LIQUID_GAS),Permutation(2,1,0,3));
    sandRules[7] = Rule(State(LIQUID_GAS,SOLID,LIQUID_GAS,SOLID),Permutation(3,1,2,0));
    sandRules[8] = Rule(State(SOLID,LIQUID_GAS,SOLID,LIQUID_GAS),Permutation(0,2,1,3));
}

Rule waterRules[9];

void initWaterRules(){
    waterRules[0] = Rule(State(GAS,GAS,LIQUID,GAS),Permutation(2,1,0,3));
    waterRules[1] = Rule(State(GAS,GAS,GAS,LIQUID),Permutation(0,3,2,1));
    waterRules[2] = Rule(State(GAS,GAS,LIQUID,LIQUID),Permutation(2,3,0,1));
    waterRules[3] = Rule(State(GAS,LIQUID,LIQUID,LIQUID),Permutation(2,1,0,3));
    waterRules[4] = Rule(State(LIQUID,GAS,LIQUID,LIQUID),Permutation(0,3,2,1));
    waterRules[5] = Rule(State(LIQUID,GAS,GAS,LIQUID),Permutation(0,3,2,1));
    waterRules[6] = Rule(State(GAS,LIQUID,LIQUID,GAS),Permutation(2,1,0,3));
    waterRules[7] = Rule(State(GAS,LIQUID,GAS,LIQUID),Permutation(3,1,2,0));
    waterRules[8] = Rule(State(LIQUID,GAS,LIQUID,GAS),Permutation(0,2,1,3));
}

Rule waterDirectionalRules[6];
void initWaterDirectionalRules(){
    waterDirectionalRules[0] = Rule(State(LIQUID_RIGHT,LIQUID_LEFT,LIQUID_GAS,LIQUID_GAS),Permutation(1,0,2,3));
    waterDirectionalRules[1] = Rule(State(SOLID_LIQUID,SOLID_LIQUID,LIQUID_RIGHT,LIQUID_LEFT),Permutation(0,1,3,2));
    waterDirectionalRules[2] = Rule(State(SOLID_LIQUID,SOLID_LIQUID,LIQUID_RIGHT,GAS),Permutation(0,1,3,2));
    waterDirectionalRules[3] = Rule(State(SOLID_LIQUID,SOLID_LIQUID,GAS,LIQUID_LEFT),Permutation(0,1,3,2));
    waterDirectionalRules[4] = Rule(State(LIQUID_RIGHT,LIQUID_GAS,LIQUID_GAS,LIQUID_GAS),Permutation(1,0,2,3));
    waterDirectionalRules[5] = Rule(State(LIQUID_GAS,LIQUID_LEFT,LIQUID_GAS,LIQUID_GAS),Permutation(1,0,2,3));
}

Rule mistRulesClockwise[3];
Rule mistRulesCounterClockwise[3];
void initMistRulesClockwise(){
    //no moving if directions oppose (see HPP gas / TM gas)
    mistRulesClockwise[0] = Rule(State(GAS_MOVING,GAS,GAS,GAS_MOVING),Permutation(0,1,2,3));
    mistRulesClockwise[1] = Rule(State(GAS,GAS_MOVING,GAS_MOVING,GAS),Permutation(0,1,2,3));
    
    // else, permutate clockwise;
    mistRulesClockwise[2] = Rule(State(GAS,GAS,GAS,GAS),Permutation(1,3,0,2));
}
void initMistRulesCounterClockwise(){
    //no moving if directions oppose (see HPP gas / TM gas)
    mistRulesCounterClockwise[0] = Rule(State(GAS_MOVING,GAS,GAS,GAS_MOVING),Permutation(0,1,2,3));
    mistRulesCounterClockwise[1] = Rule(State(GAS,GAS_MOVING,GAS_MOVING,GAS),Permutation(0,1,2,3));

    // else, permutate counter clockwise;
    mistRulesCounterClockwise[2] = Rule(State(GAS,GAS,GAS,GAS),Permutation(2,0,3,1));
}


void main() {
///////////////////////////////////////////
    stepx = u_step; 
    stepy = u_step;

    initSandRules();
    initWaterRules();
    initWaterDirectionalRules();
    initMistRulesClockwise();
    initMistRulesCounterClockwise();

    dx = SCALE / u_width; //pixel width
    dy = SCALE / u_height; //pixel height
    cellx = v_texCoord.x / dx + float(stepx);
    celly = v_texCoord.y / dy + float(stepy);
    float blockx = cellx / 2.0;
    float blocky = celly / 2.0;


    vec4 color = texture2D(u_texture, v_texCoord);

    // find cell position within the 2x2 block : |2,3|
    //                                           |0,1|

    int cellPosition = 0;
    vec4 cell0Color;
    vec4 cell1Color;
    vec4 cell2Color;
    vec4 cell3Color;

    if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 0;
        cell0Color = color;
        cell1Color = getCellColor(1.0,0.0);
        cell2Color = getCellColor(0.0,1.0);
        cell3Color = getCellColor(1.0,1.0);
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 1;
        cell0Color = getCellColor(-1.0,0.0);
        cell1Color = color;
        cell2Color = getCellColor(-1.0,1.0);
        cell3Color = getCellColor(0.0,1.0);
    }
    else if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 2;
        cell0Color = getCellColor(0.0,-1.0);
        cell1Color = getCellColor(1.0,-1.0);
        cell2Color = color;
        cell3Color = getCellColor(1.0,0.0);
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 3;
        cell0Color = getCellColor(-1.0,-1.0);
        cell1Color = getCellColor(0.0,-1.0);
        cell2Color = getCellColor(-1.0,0.0);
        cell3Color = color;
    }

    State currentState = State(
        getStateOfMatter(cell0Color),
        getStateOfMatter(cell1Color),
        getStateOfMatter(cell2Color),
        getStateOfMatter(cell3Color)
    );

    Permutation permutation = Permutation(0,1,2,3);

    bool ruleFound = false;

    // CHECK SAND RULES
    for(int i = 0;i < 9; i++){
        Rule rule = sandRules[i];
        State state = rule.state;
        if(
            compareStateOfMatter(currentState.cell0State, state.cell0State) &&
            compareStateOfMatter(currentState.cell1State, state.cell1State) &&
            compareStateOfMatter(currentState.cell2State, state.cell2State) &&
            compareStateOfMatter(currentState.cell3State, state.cell3State) 
        ){
            ruleFound = true;
            permutation = rule.p;
            break;
        }
    }


    // CHECK WATER RULES
    if(!ruleFound){
    for(int i = 0;i < 9; i++){
        Rule rule = waterRules[i];
        State state = rule.state;
        if(
            compareStateOfMatter(currentState.cell0State, state.cell0State) &&
            compareStateOfMatter(currentState.cell1State, state.cell1State) &&
            compareStateOfMatter(currentState.cell2State, state.cell2State) &&
            compareStateOfMatter(currentState.cell3State, state.cell3State) 
        ){
            ruleFound = true;
            permutation = rule.p;
            break;
        }
    }
    }

    // CHECK WATER RULES DIRECTIONAL
    if(!ruleFound){
    for(int i = 0;i < 6; i++){
        Rule rule = waterDirectionalRules[i];
        State state = rule.state;
        if(
            compareStateOfMatter(currentState.cell0State, state.cell0State) &&
            compareStateOfMatter(currentState.cell1State, state.cell1State) &&
            compareStateOfMatter(currentState.cell2State, state.cell2State) &&
            compareStateOfMatter(currentState.cell3State, state.cell3State) 
        ){
            ruleFound = true;
            permutation = rule.p;
            break;
        }
    }}

    // CHECK MIST RULES
    if(!ruleFound){
    for(int i = 0;i < 3; i++){
        Rule rule;
        if(u_step==0) rule = mistRulesClockwise[i];
        if(u_step==1) rule = mistRulesCounterClockwise[i];
        State state = rule.state;
        if(
            compareStateOfMatter(currentState.cell0State, state.cell0State) &&
            compareStateOfMatter(currentState.cell1State, state.cell1State) &&
            compareStateOfMatter(currentState.cell2State, state.cell2State) &&
            compareStateOfMatter(currentState.cell3State, state.cell3State) 
        ){
            ruleFound = true;
            permutation = rule.p;
            break;
        }
    }
    }
    

    if(cellPosition == 0){
        if(permutation.cell0 == 0){color = cell0Color;};
        if(permutation.cell0 == 1){color = cell1Color;};
        if(permutation.cell0 == 2){color = cell2Color;};
        if(permutation.cell0 == 3){color = cell3Color;};
    }
    if(cellPosition == 1){
        if(permutation.cell1 == 0){color = cell0Color;};
        if(permutation.cell1 == 1){color = cell1Color;};
        if(permutation.cell1 == 2){color = cell2Color;};
        if(permutation.cell1 == 3){color = cell3Color;};
    }
    if(cellPosition == 2){ 
        if(permutation.cell2 == 0){color = cell0Color;};
        if(permutation.cell2 == 1){color = cell1Color;};
        if(permutation.cell2 == 2){color = cell2Color;};
        if(permutation.cell2 == 3){color = cell3Color;};
    }
    if(cellPosition == 3){
        if(permutation.cell3 == 0){color = cell0Color;};
        if(permutation.cell3 == 1){color = cell1Color;};
        if(permutation.cell3 == 2){color = cell2Color;};
        if(permutation.cell3 == 3){color = cell3Color;};
    }


   


    if(!ruleFound){
        if(all(equalEnough(color, WATERL))){color = WATERR;ruleFound = true;}
        else if(all(equalEnough(color, WATERR))){color = WATERL;ruleFound = true;}
    }



    float crayonSize = float(u_crayonSize);
    // SPAWNING ELEMENT
    if(
        celly >= floor(u_spawn.y/SCALE) + float(stepy)  && celly < floor(u_spawn.y/SCALE) + crayonSize + float(stepy)  &&
        cellx < floor(u_spawn.x/SCALE) + crayonSize + float(stepx) && cellx >=  floor(u_spawn.x/SCALE) + float(stepx)
    )
    {
        if(u_element == 0){
            color = SAND;
        }
        if(u_element == 1){
            color = AIR;
        }
        if(u_element == 2){
            if(u_step ==0){
                color = WATERR;
            }else if(u_step == 1){
                color = WATERL;
            }else if(u_step ==2){
                color = WATERR;
            }else if(u_step ==3){
                color = WATERL;
            }
        }
        if(u_element == 3){
            color = WOOD;
        }
        if(u_element == 4){
            color = MIST;
        }
        if(u_element == 5){
            color = FIRE;
        }
    }

    // DRAWING SAND FLOOR
    if( celly < 1.0){
        color = SAND;
    }

    gl_FragColor = color;

}
