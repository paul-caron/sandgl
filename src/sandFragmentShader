precision highp float;
varying vec2 v_texCoord;
uniform sampler2D u_texture;
uniform float u_width;
uniform float u_height;
uniform int u_step;
uniform vec2 u_spawn;
uniform int u_element;

const vec4 SAND = vec4(1.0,1.0,0.0,1.0);
const vec4 AIR = vec4(0.0,0.0,0.0,1.0);
const vec4 WATER = vec4(0.0,0.0,1.0,1.0);
const vec4 WATERL = vec4(0.1,0.1,1.0,1.0);
const vec4 WATERR = vec4(0.0,0.0,0.8,1.0);
const vec4 WOOD = vec4(0.6,0.4,0.2,1.0);

const int SOLID_STATIC = 0; //NOT MOVING
const int SOLID = 1;
const int LIQUID = 2;
const int SOLID_LIQUID = 3;
const int GAS = 4;
const int LIQUID_GAS = 6;


int getStateOfMatter(vec4 color){
    if(color == WATER || color == WATERL || color == WATERR){
        return LIQUID;
    }else if (color == SAND){
        return SOLID;
    }else if (color == AIR){
        return GAS;
    }
    return SOLID_STATIC;
}

bool compareStateOfMatter(int a, int b){
    if(a == LIQUID){
      if(b == LIQUID || b == LIQUID_GAS){
          return true;
      }
      return false;
    }
    if(a == SOLID){
      if(b == SOLID || b == SOLID_LIQUID){
          return true;
      }
      return false;
    }
    if(a == GAS){
      if(b == GAS || b == LIQUID_GAS){
          return true;
      }
      return false;
    }
    return false;
}

const float SCALE = 4.0; // sand grain size

float dx;
float dy;
float cellx;
float celly;

vec4 getCellColor(float offsetX, float offsetY) {
    return texture2D(u_texture, vec2(
        (cellx + offsetX - float(u_step)) * dx,
        (celly + offsetY - float(u_step)) * dy
    ));
}

struct State{
    int cell0State;
    int cell1State;
    int cell2State;
    int cell3State;
};

struct Permutation{
    int cell0;
    int cell1;
    int cell2;
    int cell3;
};

struct Rule{
    State state;
    Permutation p;
};

Rule sandRules[9];

void initSandRules(){
    sandRules[0] = Rule(State(LIQUID_GAS,LIQUID_GAS,SOLID,LIQUID_GAS),Permutation(2,1,0,3));
    sandRules[1] = Rule(State(LIQUID_GAS,LIQUID_GAS,LIQUID_GAS,SOLID),Permutation(0,3,2,1));
    sandRules[2] = Rule(State(LIQUID_GAS,LIQUID_GAS,SOLID,SOLID),Permutation(2,3,0,1));
    sandRules[3] = Rule(State(LIQUID_GAS,SOLID,SOLID,SOLID),Permutation(2,1,0,3));
    sandRules[4] = Rule(State(SOLID,LIQUID_GAS,SOLID,SOLID),Permutation(0,3,2,1));
    sandRules[5] = Rule(State(SOLID,LIQUID_GAS,LIQUID_GAS,SOLID),Permutation(0,3,2,1));
    sandRules[6] = Rule(State(LIQUID_GAS,SOLID,SOLID,LIQUID_GAS),Permutation(2,1,0,3));
    sandRules[7] = Rule(State(LIQUID_GAS,SOLID,LIQUID_GAS,SOLID),Permutation(3,1,2,0));
    sandRules[8] = Rule(State(SOLID,LIQUID_GAS,SOLID,LIQUID_GAS),Permutation(0,2,1,3));
}

Rule waterRules[9];

void initWaterRules(){
    waterRules[0] = Rule(State(GAS,GAS,LIQUID,GAS),Permutation(2,1,0,3));
    waterRules[1] = Rule(State(GAS,GAS,GAS,LIQUID),Permutation(0,3,2,1));
    waterRules[2] = Rule(State(GAS,GAS,LIQUID,LIQUID),Permutation(2,3,0,1));
    waterRules[3] = Rule(State(GAS,LIQUID,LIQUID,LIQUID),Permutation(2,1,0,3));
    waterRules[4] = Rule(State(LIQUID,GAS,LIQUID,LIQUID),Permutation(0,3,2,1));
    waterRules[5] = Rule(State(LIQUID,GAS,GAS,LIQUID),Permutation(0,3,2,1));
    waterRules[6] = Rule(State(GAS,LIQUID,LIQUID,GAS),Permutation(2,1,0,3));
    waterRules[7] = Rule(State(GAS,LIQUID,GAS,LIQUID),Permutation(3,1,2,0));
    waterRules[8] = Rule(State(LIQUID,GAS,LIQUID,GAS),Permutation(0,2,1,3));
}

void main() {
    initSandRules();
    initWaterRules();

    dx = SCALE / u_width;   //pixel width
    dy = SCALE / u_height; //pixel height
    cellx = v_texCoord.x / dx + float(u_step);
    celly = v_texCoord.y / dy + float(u_step);
    float blockx = cellx / 2.0;
    float blocky = celly / 2.0;


    vec4 color = texture2D(u_texture, v_texCoord);

    // find cell position within the 2x2 block : |2,3|
    //                                           |0,1|

    int cellPosition = 0;
    vec4 cell0Color;
    vec4 cell1Color;
    vec4 cell2Color;
    vec4 cell3Color;

    if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 0;
        cell0Color = color;
        cell1Color = getCellColor(1.0,0.0);
        cell2Color = getCellColor(0.0,1.0);
        cell3Color = getCellColor(1.0,1.0);
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 1;
        cell0Color = getCellColor(-1.0,0.0);
        cell1Color = color;
        cell2Color = getCellColor(-1.0,1.0);
        cell3Color = getCellColor(0.0,1.0);
    }
    else if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 2;
        cell0Color = getCellColor(0.0,-1.0);
        cell1Color = getCellColor(1.0,-1.0);
        cell2Color = color;
        cell3Color = getCellColor(1.0,0.0);
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 3;
        cell0Color = getCellColor(-1.0,-1.0);
        cell1Color = getCellColor(0.0,-1.0);
        cell2Color = getCellColor(-1.0,0.0);
        cell3Color = color;
    }

    State currentState = State(
        getStateOfMatter(cell0Color),
        getStateOfMatter(cell1Color),
        getStateOfMatter(cell2Color),
        getStateOfMatter(cell3Color)
    );

    Permutation permutation = Permutation(0,1,2,3);

    // CHECK SAND RULES
    for(int i = 0;i < 9; i++){
        Rule rule = sandRules[i];
        State state = rule.state;
        if(
            compareStateOfMatter(currentState.cell0State, state.cell0State) &&
            compareStateOfMatter(currentState.cell1State, state.cell1State) &&
            compareStateOfMatter(currentState.cell2State, state.cell2State) &&
            compareStateOfMatter(currentState.cell3State, state.cell3State) 
        ){
            permutation = rule.p;
            break;
        }
    }

    // CHECK WATER RULES
    for(int i = 0;i < 9; i++){
        Rule rule = waterRules[i];
        State state = rule.state;
        if(
            compareStateOfMatter(currentState.cell0State, state.cell0State) &&
            compareStateOfMatter(currentState.cell1State, state.cell1State) &&
            compareStateOfMatter(currentState.cell2State, state.cell2State) &&
            compareStateOfMatter(currentState.cell3State, state.cell3State) 
        ){
            permutation = rule.p;
            break;
        }
    }


    if(cellPosition == 0){
        if(permutation.cell0 == 0){color = cell0Color;};
        if(permutation.cell0 == 1){color = cell1Color;};
        if(permutation.cell0 == 2){color = cell2Color;};
        if(permutation.cell0 == 3){color = cell3Color;};
    }
    if(cellPosition == 1){
        if(permutation.cell1 == 0){color = cell0Color;};
        if(permutation.cell1 == 1){color = cell1Color;};
        if(permutation.cell1 == 2){color = cell2Color;};
        if(permutation.cell1 == 3){color = cell3Color;};
    }
    if(cellPosition == 2){ 
        if(permutation.cell2 == 0){color = cell0Color;};
        if(permutation.cell2 == 1){color = cell1Color;};
        if(permutation.cell2 == 2){color = cell2Color;};
        if(permutation.cell2 == 3){color = cell3Color;};
    }
    if(cellPosition == 3){
        if(permutation.cell3 == 0){color = cell0Color;};
        if(permutation.cell3 == 1){color = cell1Color;};
        if(permutation.cell3 == 2){color = cell2Color;};
        if(permutation.cell3 == 3){color = cell3Color;};
    }

    // SPAWNING ELEMENT
    if(
        celly >= floor(u_spawn.y/SCALE) + float(u_step)  && celly < floor(u_spawn.y/SCALE) + 1.0 + float(u_step)  &&
        cellx < floor(u_spawn.x/SCALE) + 1.0 + float(u_step) && cellx >=  floor(u_spawn.x/SCALE) + float(u_step)
    )
    {
        if(u_element == 0){
            color = SAND;
        }
        if(u_element == 1){
            color = AIR;
        }
        if(u_element == 2){
            color = WATER;
        }
        if(u_element == 3){
            color = WOOD;
        }
    }

    // DRAWING SAND FLOOR
    if( celly < 1.0){
        color = SAND;
    }

    gl_FragColor = color;

}
