precision highp float;
varying vec2 v_texCoord;
uniform sampler2D u_texture;
uniform float u_width;
uniform float u_height;
uniform int u_step;
uniform vec2 u_spawn;
uniform int u_element;

const vec4 SAND = vec4(1.0,1.0,0.0,1.0);
const vec4 AIR = vec4(0.0,0.0,0.0,1.0);
const vec4 WATER = vec4(0.0,0.0,1.0,1.0);
const vec4 WATERL = vec4(0.1,0.1,1.0,1.0);
const vec4 WATERR = vec4(0.0,0.0,0.8,1.0);
const vec4 WOOD = vec4(0.6,0.4,0.2,1.0);


const float SCALE = 4.0; // sand grain size


float dx;
float dy;
float cellx;
float celly;


vec4 getCellColor(float offsetX, float offsetY) {
    return texture2D(u_texture, vec2(
        (cellx + offsetX - float(u_step)) * dx,
        (celly + offsetY - float(u_step)) * dy
    ));
}

struct State{
    vec4 cell0Color;
    vec4 cell1Color;
    vec4 cell2Color;
    vec4 cell3Color;
};

struct Rule{
    State from;
    State to;
};

Rule sandRules[9];

void initSandRules(){
    sandRules[0] = Rule(State(AIR,AIR,SAND,AIR),State(SAND,AIR,AIR,AIR));
    sandRules[1] = Rule(State(AIR,AIR,AIR,SAND),State(AIR,SAND,AIR,AIR));
    sandRules[2] = Rule(State(AIR,AIR,SAND,SAND),State(SAND,SAND,AIR,AIR));
    sandRules[3] = Rule(State(AIR,SAND,SAND,SAND),State(SAND,SAND,AIR,SAND));
    sandRules[4] = Rule(State(SAND,AIR,SAND,SAND),State(SAND,SAND,SAND,AIR));
    sandRules[5] = Rule(State(SAND,AIR,AIR,SAND),State(SAND,SAND,AIR,AIR));
    sandRules[6] = Rule(State(AIR,SAND,SAND,AIR),State(SAND,SAND,AIR,AIR));
    sandRules[7] = Rule(State(AIR,SAND,AIR,SAND),State(SAND,SAND,AIR,AIR));
    sandRules[8] = Rule(State(SAND,AIR,SAND,AIR),State(SAND,SAND,AIR,AIR));
}

void main() {
    initSandRules();

    dx = SCALE / u_width;   //pixel width
    dy = SCALE / u_height; //pixel height
    cellx = v_texCoord.x / dx + float(u_step);
    celly = v_texCoord.y / dy + float(u_step);
    float blockx = cellx / 2.0;
    float blocky = celly / 2.0;


    vec4 color = texture2D(u_texture, v_texCoord);

    // find cell position within the 2x2 block : |2,3|
    //                                           |0,1|

    int cellPosition = 0;
    vec4 cell0Color;
    vec4 cell1Color;
    vec4 cell2Color;
    vec4 cell3Color;

    if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 0;
        cell0Color = color;
        cell1Color = getCellColor(1.0,0.0);
        cell2Color = getCellColor(0.0,1.0);
        cell3Color = getCellColor(1.0,1.0);
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 1;
        cell0Color = getCellColor(-1.0,0.0);
        cell1Color = color;
        cell2Color = getCellColor(-1.0,1.0);
        cell3Color = getCellColor(0.0,1.0);
    }
    else if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 2;
        cell0Color = getCellColor(0.0,-1.0);
        cell1Color = getCellColor(1.0,-1.0);
        cell2Color = color;
        cell3Color = getCellColor(1.0,0.0);
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 3;
        cell0Color = getCellColor(-1.0,-1.0);
        cell1Color = getCellColor(0.0,-1.0);
        cell2Color = getCellColor(-1.0,0.0);
        cell3Color = color;
    }

    State currentState = State(cell0Color,cell1Color,cell2Color,cell3Color);
    State nextState = currentState;

    for(int i = 0;i < 9; i++){
        Rule rule = sandRules[i];
        State from = rule.from;
        State to = rule.to;
        if(currentState == from){
            nextState = to;
            break;
        }
    }

    if(cellPosition == 0){ color = nextState.cell0Color;}
    if(cellPosition == 1){ color = nextState.cell1Color;}
    if(cellPosition == 2){ color = nextState.cell2Color;}
    if(cellPosition == 3){ color = nextState.cell3Color;}

    // SPAWNING ELEMENT
    if(
        celly >= floor(u_spawn.y/SCALE) + float(u_step)  && celly < floor(u_spawn.y/SCALE) + 1.0 + float(u_step)  &&
        cellx < floor(u_spawn.x/SCALE) + 1.0 + float(u_step) && cellx >=  floor(u_spawn.x/SCALE) + float(u_step)
    )
    {
        if(u_element == 0){
            color = SAND;
        }
        if(u_element == 1){
            color = AIR;
        }
        if(u_element == 2){
            color = WATER;
        }
        if(u_element == 3){
            color = WOOD;
        }
    }

    // DRAWING SAND FLOOR
    if( celly < 1.0){
        color = SAND;
    }

    gl_FragColor = color;

}
