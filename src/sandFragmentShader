precision highp float;
varying vec2 v_texCoord;
uniform sampler2D u_texture;
uniform float u_width;
uniform float u_height;
uniform int u_step;
uniform vec2 u_spawn;
uniform int u_element;

const vec4 SAND = vec4(1.0,1.0,0.0,1.0);
const vec4 AIR = vec4(0.0,0.0,0.0,1.0);
const vec4 WATER = vec4(0.0,0.0,1.0,1.0);
const vec4 WOOD = vec4(0.6,0.4,0.2,1.0);

vec2 SPAWN = u_spawn;//vec2(180.0,360.0); // spawning point colX rowY
const float SCALE = 4.0; // sand grain size

void main() {
    float dx = SCALE / u_width;   //pixel width
    float dy = SCALE / u_height; //pixel height

    vec4 color = texture2D(u_texture, v_texCoord);
    float cellx = v_texCoord.x / dx + float(u_step);
    float celly = v_texCoord.y / dy + float(u_step);
    float blockx = cellx / 2.0;
    float blocky = celly / 2.0;

    // find cell position within the 2x2 block : |2,3|
    //                                           |0,1|

    int cellPosition = 0;

    if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 0;
        vec4 cell2Color = texture2D(u_texture, vec2(
            (cellx - float(u_step)) * dx, 
            (celly + 1.0 - float(u_step)) * dy));
        vec4 cell3Color = texture2D(u_texture, vec2(
            (cellx + 1.0 - float(u_step)) * dx, 
            (celly + 1.0 - float(u_step)) * dy));
        vec4 cell1Color = texture2D(u_texture, vec2(
            (cellx + 1.0 - float(u_step)) * dx, 
            (celly - float(u_step)) * dy));

        //if no sand present, try fill it
        if(color == AIR){
            if(cell2Color == SAND){
                color = SAND;
            }else if(cell3Color == SAND && cell1Color != AIR){
                color = SAND;
            }
        }
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) < 1.0){
        cellPosition = 1;
        vec4 cell2Color = texture2D(u_texture, vec2(
            (cellx - 1.0 - float(u_step)) * dx, 
            (celly + 1.0 - float(u_step)) * dy));
        vec4 cell3Color = texture2D(u_texture, vec2(
            (cellx - float(u_step)) * dx, 
            (celly + 1.0 - float(u_step)) * dy));
        vec4 cell0Color = texture2D(u_texture, vec2(
            (cellx - 1.0 - float(u_step)) * dx, 
            (celly - float(u_step)) * dy));

        //if no sand present, try fill it
        if(color == AIR){
            if(cell3Color == SAND){
                color = SAND;
            }else if(cell2Color == SAND && cell0Color != AIR){
                color = SAND;
            }
        }
    }
    else if(mod(cellx, 2.0) < 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 2;
        vec4 cell1Color = texture2D(u_texture, vec2(
            (cellx + 1.0 - float(u_step)) * dx, 
            (celly - 1.0 - float(u_step)) * dy));
        vec4 cell3Color = texture2D(u_texture, vec2(
            (cellx + 1.0 - float(u_step)) * dx, 
            (celly - float(u_step)) * dy));
        vec4 cell0Color = texture2D(u_texture, vec2(
            (cellx - float(u_step)) * dx, 
            (celly - 1.0 - float(u_step)) * dy));

        //if sand present, try empty it
        if(color == SAND){
            if(cell0Color == AIR){
                color = AIR;
            }else if(cell1Color == AIR && cell3Color != SAND){
                color = AIR;
            }
        }
    }
    else if(mod(cellx, 2.0) >= 1.0 && mod(celly, 2.0) >= 1.0){
        cellPosition = 3;
        vec4 cell1Color = texture2D(u_texture, vec2(
            (cellx - float(u_step)) * dx, 
            (celly - 1.0 - float(u_step)) * dy));
        vec4 cell2Color = texture2D(u_texture, vec2(
            (cellx - 1.0 - float(u_step)) * dx, 
            (celly - float(u_step)) * dy));
        vec4 cell0Color = texture2D(u_texture, vec2(
            (cellx - 1.0 - float(u_step)) * dx, 
            (celly - 1.0 - float(u_step)) * dy));

        //if sand present, try empty it
        if(color == SAND){
            if(cell1Color == AIR){
                color = AIR;
            }else if(cell0Color == AIR && cell2Color != SAND){
                color = AIR;
            }
        }
    }






if(
        celly >= floor(SPAWN.y/SCALE) + float(u_step)  && celly < floor(SPAWN.y/SCALE) + 1.0 + float(u_step)  &&
        cellx < floor(SPAWN.x/SCALE) + 1.0 + float(u_step) && cellx >=  floor(SPAWN.x/SCALE) + float(u_step)

)
{
if(u_element == 0){
    color = SAND;
}
if(u_element == 1){
    color = AIR;
}
if(u_element == 3){
    color = WOOD;
}
}

    if(

        celly < 1.0

    ){
        color = SAND;
    }

    gl_FragColor = color;

}
